#!/usr/bin/env bash

function script_name { # Adapted from http://github.com/technomancy/leiningen
    local script

    # normalize $0 on certain BSDs
    if [ "$(dirname "$0")" = "." ]; then
        script="$(which $(basename "$0"))"
    else
        script="$0"
    fi

    # resolve symlinks to the script itself portably
    while [ -h "$script" ] ; do
        ls=`ls -ld "$script"`
        link=`expr "$ls" : '.*-> \(.*\)$'`
        if expr "$link" : '/.*' > /dev/null; then
            script="$link"
        else
            script="$(dirname "$script"$)/$link"
        fi
    done
    echo $script
}

function http_get { # Adapted from http://github.com/technomancy/leiningen
    if [ -z $http_get ]; then
        if type -p curl >/dev/null 2>&1; then
            http_get="curl -f -L -o"
        else
            http_get="wget -O"
        fi
    fi
    mkdir -p $(dirname $1)
    $http_get $1.pending $2
    mv $1.pending $1
}

function find_drip_jar {
    if [ -z $DRIP_JAR ]; then
        bin_dir=$(dirname $(script_name))
        if [ -r $bin_dir/../src/org/flatland/drip/Main.java ]; then
            # Checkout
            drip_dir=$(dirname $bin_dir)
            DRIP_JAR=$drip_dir/drip.jar
            (cd $drip_dir && make -s jar)
        else
            # Standalone
            DRIP_JAR=~/.m2/repository/org/flatland/drip/$DRIP_VERSION/drip-$DRIP_VERSION.jar
            [ -e $DRIP_JAR ] || http_get $DRIP_JAR $DRIP_URL
        fi
    fi
}

declare -a jvm_args
declare -a main_args
declare -a runtime_args

function parse_args {
    if [ 0 -eq $# ]; then
        echo "Usage: drip [same args as java...]"
        exit 0
    fi

    for arg in "$@"; do
        if [ -z $main_class ]; then
            if [[ "$arg" != -* ]]; then
                main_class=$arg
            else
                jvm_args[${#jvm_args[*]}]=$arg
            fi
        elif [ -z $runtime ]; then
            if [ "$arg" == "--" ]; then
                runtime=1
            else
                main_args[${#main_args[*]}]=$arg
            fi
        else
            runtime_args[${#runtime_args[*]}]=$arg
        fi
    done
}

function make_sha_path {
    opts="${jvm_args[*]} $main_class"
    sha=$(echo "$opts" | git hash-object --stdin)
    path=$DRIP_HOME/$sha
    mkdir -p $path
    echo "$opts" > $path/opts
}

function launch_jvm {
    dir=$path/$$-$n

    if mkdir $dir; then
        mkfifo $dir/in
        mkfifo $dir/out
        mkfifo $dir/err

        java ${jvm_args[*]} -Xbootclasspath/a:$DRIP_JAR org.flatland.drip.Main $main_class $dir &
        echo $! > $dir/jvm.pid
    fi
}

function lock_dir {
    if mkdir $dir/lock 2> /dev/null; then
        if [ ! -z $1 ] || kill -0 $(cat $dir/jvm.pid) 2> /dev/null; then
            echo $$ > $dir/client.pid
            fifo=$dir
        fi
    fi
}

function find_jvm {
    make_sha_path

    for dir in $path/*-*; do
        if [ -z $fifo ]; then
            lock_dir
        elif [ ! -e $dir/lock ]; then
            let n=$n+1
        fi
    done

    n=${n:-0}

    while [ $n -lt $DRIP_POOL ]; do
        let n=$n+1
        launch_jvm
    done

    if [ -z $fifo ]; then
        for arg in "${main_args[@]}"; do
            argstr=$argstr$(printf -- "%q " "$arg")
        done

        eval java ${jvm_args[*]} ${runtime_args[@]} $main_class $argstr
        exit $?
    fi
}

function send_array {
    for e; do
        printf -- "%s\0" "$e" >&3
    done
    printf "\n" >&3
}

function duplex_stdin {
    exec 3> $fifo/in
    send_array "${main_args[@]}"
    send_array "${runtime_args[@]}"
    cat >&3 2> /dev/null
    exec 3>&-
}

function run_main {
    duplex_stdin <&0 &
    cat $fifo/err >&2 &
    cat $fifo/out
    rm -rf $fifo
}

# Let's go.

DRIP_POOL=1
DRIP_HOME=${DRIP_HOME:-~/.drip}
[ -d $DRIP_HOME ] || mkdir $DRIP_HOME
DRIP_VERSION=${DRIP_VERSION:-0.0.2}
DRIP_REPO=${DRIP_REPO:-http://clojars.org/repo}
DRIP_URL=${DRIP_URL:-$DRIP_REPO/org/flatland/drip/${DRIP_VERSION}/drip-${DRIP_VERSION}.jar}

find_drip_jar

parse_args "$@"

find_jvm
run_main

exit 0
